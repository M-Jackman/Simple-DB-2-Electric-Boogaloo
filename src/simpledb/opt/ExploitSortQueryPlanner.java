package simpledb.opt;

import simpledb.tx.Transaction;
import simpledb.query.*;
import simpledb.opt.TablePlanner;
import simpledb.parse.QueryData;
import simpledb.planner.QueryPlanner;
import java.util.*;

/**
 * A query planner that optimizes using a heuristic-based algorithm.
 * @author Edward Sciore
 */
public class ExploitSortQueryPlanner implements QueryPlanner {
    private Collection<ExploitSortTablePlanner> tableplanners = new ArrayList<ExploitSortTablePlanner>();

    /**
     * Creates an optimized left-deep query plan using the following
     * heuristics.
     * H1. Choose the smallest table (considering selection predicates)
     * to be first in the join order.
     * H2. Add the table to the join order which
     * results in the smallest output.
     */
    public Plan createPlan(QueryData data, Transaction tx) {

        // Step 1:  Create a TablePlanner object for each mentioned table
        for (String tblname : data.tables()) {
            ExploitSortTablePlanner tp = new ExploitSortTablePlanner(tblname, data.pred(), tx);
            tableplanners.add(tp);
        }

        // Step 2:  Choose the lowest-size plan to begin the join order
        Plan currentplan = getLowestSelectPlan();

        // Step 3:  Repeatedly add a plan to the join order
        while (!tableplanners.isEmpty()) {
            Plan p = getLowestJoinPlan(currentplan);
            if (p != null)
                currentplan = p;
            else  // no applicable join
                currentplan = getLowestProductPlan(currentplan);
        }

        // Step 4.  Project on the field names and return
        return new ProjectPlan(currentplan, data.fields());
    }

    private Plan getLowestSelectPlan() {
        ExploitSortTablePlanner besttp = null;
        Plan bestplan = null;
        for (ExploitSortTablePlanner tp : tableplanners) {
            Plan plan = tp.makeSelectPlan();
            if (bestplan == null || plan.recordsOutput() < bestplan.recordsOutput()) {
                besttp = tp;
                bestplan = plan;
            }
        }
        tableplanners.remove(besttp);
        return bestplan;
    }

    private Plan getLowestJoinPlan(Plan current) {
        ExploitSortTablePlanner besttp = null;
        Plan bestplan = null;
        for (ExploitSortTablePlanner tp : tableplanners) {
            Plan plan = tp.makeJoinPlan(current);
            if (plan != null && (bestplan == null || plan.recordsOutput() < bestplan.recordsOutput())) {
                besttp = tp;
                bestplan = plan;
            }
        }
        if (bestplan != null)
            tableplanners.remove(besttp);
        return bestplan;
    }

    private Plan getLowestProductPlan(Plan current) {
        ExploitSortTablePlanner besttp = null;
        Plan bestplan = null;
        for (ExploitSortTablePlanner tp : tableplanners) {
            Plan plan = tp.makeSortPlan(current);
            if (bestplan == null || plan.recordsOutput() < bestplan.recordsOutput()) {
                besttp = tp;
                bestplan = plan;
            }
        }
        tableplanners.remove(besttp);
        return bestplan;
    }
}